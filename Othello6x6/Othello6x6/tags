!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
ARY_SIZE	Othello6x6.h	/^	ARY_SIZE = ARY_WIDTH*(N_VERT+2) + 1,$/;"	e	enum:__anona77a34960103
ARY_WIDTH	Othello6x6.h	/^	ARY_WIDTH = N_HORZ + 1,$/;"	e	enum:__anona77a34960103
BB_MASK	BoardBitboard.h	/^#define		BB_MASK	/;"	d
BLACK	Othello6x6.h	/^	BLACK,$/;"	e	enum:__anona77a34960103
Bitboard	BoardBitboard.h	/^typedef unsigned _int64	Bitboard;$/;"	t	typeref:typename:unsigned _int64
BoardArray	BoardArray.cpp	/^BoardArray::BoardArray() {$/;"	f	class:BoardArray
BoardArray	BoardArray.h	/^class BoardArray {$/;"	c
BoardBitboard	BoardBitboard.h	/^	BoardBitboard() { init(); }$/;"	f	class:BoardBitboard
BoardBitboard	BoardBitboard.h	/^class BoardBitboard {$/;"	c
BoardIndex	BoardIndex.h	/^	BoardIndex() { init(); }$/;"	f	class:BoardIndex
BoardIndex	BoardIndex.h	/^class BoardIndex {$/;"	c
C3_BIT	BoardBitboard.h	/^#define		C3_BIT	/;"	d
C4_BIT	BoardBitboard.h	/^#define		C4_BIT	/;"	d
D3_BIT	BoardBitboard.h	/^#define		D3_BIT	/;"	d
D4_BIT	BoardBitboard.h	/^#define		D4_BIT	/;"	d
DIR_D	BoardBitboard.h	/^#define		DIR_D	/;"	d
DIR_DL	BoardBitboard.h	/^#define		DIR_DL	/;"	d
DIR_DR	BoardBitboard.h	/^#define		DIR_DR	/;"	d
DIR_L	BoardBitboard.h	/^#define		DIR_L	/;"	d
DIR_R	BoardBitboard.h	/^#define		DIR_R	/;"	d
DIR_U	BoardBitboard.h	/^#define		DIR_U	/;"	d
DIR_UL	BoardBitboard.h	/^#define		DIR_UL	/;"	d
DIR_UR	BoardBitboard.h	/^#define		DIR_UR	/;"	d
E4_BIT	BoardBitboard.h	/^#define		E4_BIT	/;"	d
EMPTY	Othello6x6.h	/^	EMPTY = 0,$/;"	e	enum:__anona77a34960103
EvalFunc	EvalFunc.h	/^class EvalFunc {$/;"	c
IX_TABLE_SIZE	BoardIndex.h	/^#define		IX_TABLE_SIZE	/;"	d
MAX_NP	Othello6x6.cpp	/^#define		MAX_NP	/;"	d	file:
NPBW_TABLE_SZ	Othello6x6.cpp	/^#define		NPBW_TABLE_SZ	/;"	d	file:
N_HORZ	Othello6x6.h	/^	N_HORZ = 6,$/;"	e	enum:__anona77a34960103
N_IX_BL_UR	BoardIndex.h	/^#define		N_IX_BL_UR	/;"	d
N_IX_HORZ	BoardIndex.h	/^#define		N_IX_HORZ	/;"	d
N_IX_UL_BR	BoardIndex.h	/^#define		N_IX_UL_BR	/;"	d
N_IX_VERT	BoardIndex.h	/^#define		N_IX_VERT	/;"	d
N_PAT	Othello6x6.h	/^	N_PAT = 3*3*3*3*3*3,$/;"	e	enum:__anona77a34960103
N_PAT8	Othello6x6.h	/^	N_PAT8 = 3*3*3*3*3*3*3*3,$/;"	e	enum:__anona77a34960103
N_PAT9	Othello6x6.h	/^	N_PAT9 = 3*3*3*3*3*3*3*3*3,$/;"	e	enum:__anona77a34960103
N_PTYPE	Othello6x6.h	/^	N_PTYPE,$/;"	e	enum:__anona77a34960103
N_VERT	Othello6x6.h	/^	N_VERT = 6,$/;"	e	enum:__anona77a34960103
PTYPE_DIAG3	Othello6x6.h	/^	PTYPE_DIAG3,		\/\/	$/;"	e	enum:__anona77a34960103
PTYPE_DIAG4	Othello6x6.h	/^	PTYPE_DIAG4,		\/\/	$/;"	e	enum:__anona77a34960103
PTYPE_DIAG5	Othello6x6.h	/^	PTYPE_DIAG5,		\/\/	$/;"	e	enum:__anona77a34960103
PTYPE_DIAG6	Othello6x6.h	/^	PTYPE_DIAG6,		\/\/	中央対角線上$/;"	e	enum:__anona77a34960103
PTYPE_LINE1	Othello6x6.h	/^	PTYPE_LINE1 = 0,	\/\/	1・6行目、1・6列目$/;"	e	enum:__anona77a34960103
PTYPE_LINE2	Othello6x6.h	/^	PTYPE_LINE2,$/;"	e	enum:__anona77a34960103
PTYPE_LINE3	Othello6x6.h	/^	PTYPE_LINE3,$/;"	e	enum:__anona77a34960103
SIndexTableItem	BoardIndex.cpp	/^	SIndexTableItem(ushort dst_ix = 0, uchar n1 = 0, uchar n2 = 0)$/;"	f	struct:SIndexTableItem	file:
SIndexTableItem	BoardIndex.cpp	/^struct SIndexTableItem {$/;"	s	file:
WALL	Othello6x6.h	/^	WALL,			\/\/	番人$/;"	e	enum:__anona77a34960103
WHITE	Othello6x6.h	/^	WHITE,$/;"	e	enum:__anona77a34960103
__anona77a34960103	Othello6x6.h	/^enum {$/;"	g
bb_to_string	BoardBitboard.cpp	/^string bb_to_string(Bitboard bb) {$/;"	f	typeref:typename:string
bitToX	BoardBitboard.cpp	/^int bitToX(Bitboard b) {		\/\/	x: [0, N_HORZ), y: [0, N_VERT)$/;"	f	typeref:typename:int
bitToY	BoardBitboard.cpp	/^int bitToY(Bitboard b) {		\/\/	x: [0, N_HORZ), y: [0, N_VERT)$/;"	f	typeref:typename:int
buildIndexTable	BoardIndex.cpp	/^void buildIndexTable() {$/;"	f	typeref:typename:void
build_rev_index	Othello6x6.cpp	/^void build_rev_index() {$/;"	f	typeref:typename:void
can_put_BLACK	BoardArray.cpp	/^bool BoardArray::can_put_BLACK(int ix) {$/;"	f	class:BoardArray	typeref:typename:bool
can_put_BLACK	BoardArray.cpp	/^bool BoardArray::can_put_BLACK(int x, int y) {$/;"	f	class:BoardArray	typeref:typename:bool
can_put_WHITE	BoardArray.cpp	/^bool BoardArray::can_put_WHITE(int ix) {$/;"	f	class:BoardArray	typeref:typename:bool
can_put_WHITE	BoardArray.cpp	/^bool BoardArray::can_put_WHITE(int x, int y) {$/;"	f	class:BoardArray	typeref:typename:bool
can_put_black	BoardBitboard.cpp	/^bool can_put_black(Bitboard black, Bitboard white, Bitboard bit) {$/;"	f	typeref:typename:bool
can_put_black	BoardIndex.cpp	/^bool can_put_black(const std::vector<uchar> &pat, int i) {		\/\/	パターンの i 番目位置（/;"	f	typeref:typename:bool
can_put_black_dir	BoardBitboard.cpp	/^bool can_put_black_dir(Bitboard black, Bitboard white, Bitboard bit, int dir) {$/;"	f	typeref:typename:bool
can_put_sub_BLACK	BoardArray.cpp	/^bool BoardArray::can_put_sub_BLACK(int ix, int dir) {$/;"	f	class:BoardArray	typeref:typename:bool
can_put_sub_WHITE	BoardArray.cpp	/^bool BoardArray::can_put_sub_WHITE(int ix, int dir) {$/;"	f	class:BoardArray	typeref:typename:bool
can_put_white	BoardIndex.cpp	/^bool can_put_white(const std::vector<uchar> &pat, int i) {		\/\/	パターンの i 番目位置（/;"	f	typeref:typename:bool
dig_str	BoardArray.cpp	/^static const char *dig_str[] = {"１", "２", "３", "４", "５", "６"};$/;"	v	typeref:typename:const char * []	file:
dig_str	BoardBitboard.cpp	/^static const char *dig_str[] = {"１", "２", "３", "４", "５", "６"};$/;"	v	typeref:typename:const char * []	file:
dig_str	BoardIndex.cpp	/^static const char *dig_str[] = {"１", "２", "３", "４", "５", "６"};$/;"	v	typeref:typename:const char * []	file:
double2string	Othello6x6.cpp	/^string double2string(double v) {$/;"	f	typeref:typename:string
eval_pat_corner8_ncanput_ncnto	Othello6x6.cpp	/^double eval_pat_corner8_ncanput_ncnto(Bitboard black, Bitboard white,$/;"	f	typeref:typename:double
exp_game_tree	Othello6x6.cpp	/^void exp_game_tree(Bitboard black, Bitboard white, int depth, bool passed) {$/;"	f	typeref:typename:void
exp_game_tree	Othello6x6.cpp	/^void exp_game_tree(BoardArray& bd, int depth, bool black_turn) {$/;"	f	typeref:typename:void
g_cnto_slope	Othello6x6.cpp	/^double g_cnto_slope = 1.0;			\/\/	評価値 = 準確定石数差 * g_cnto_slope$/;"	v	typeref:typename:double
g_count	Othello6x6.cpp	/^long long	g_count;		\/\/	末端ノード数$/;"	v	typeref:typename:long long
g_exp3	BoardIndex.cpp	/^int g_exp3[] = {1, 3, 3*3, 3*3*3, 3*3*3*3, 3*3*3*3*3};$/;"	v	typeref:typename:int[]
g_indexTableBlack	BoardIndex.cpp	/^SIndexTableItem g_indexTableBlack[IX_TABLE_SIZE*N_HORZ];$/;"	v	typeref:typename:SIndexTableItem[]
g_indexTableWhite	BoardIndex.cpp	/^SIndexTableItem g_indexTableWhite[IX_TABLE_SIZE*N_HORZ];$/;"	v	typeref:typename:SIndexTableItem[]
g_npbw_val	Othello6x6.cpp	/^double g_npbw_val[NPBW_TABLE_SZ];		\/\/	着手可能箇所数評価値テーブル、ix = npb + /;"	v	typeref:typename:double[]
g_pat	BoardIndex.cpp	/^uchar g_pat[] = {0, 0, 0, 0, 0, 0};$/;"	v	typeref:typename:uchar[]
g_pat2_val	Othello6x6.cpp	/^double g_pat2_val[N_PTYPE][N_PAT];$/;"	v	typeref:typename:double[][]
g_pat8_val	Othello6x6.cpp	/^double g_pat8_val[N_PAT8];				\/\/	角８個パターン$/;"	v	typeref:typename:double[]
g_pat_type	Othello6x6.cpp	/^int g_pat_type[] = {$/;"	v	typeref:typename:int[]
g_pat_val	Othello6x6.cpp	/^double g_pat_val[N_PAT];$/;"	v	typeref:typename:double[]
g_rev_index	Othello6x6.cpp	/^int g_rev_index[N_PAT];			\/\/	左右反転したパターンインデックス$/;"	v	typeref:typename:int[]
g_rnd	Othello6x6.cpp	/^std::random_device g_rnd;     \/\/ 非決定的な乱数生成器を生成$/;"	v	typeref:typename:std::random_device
get_color	BoardBitboard.cpp	/^uchar get_color(Bitboard black, Bitboard white, Bitboard bit) {$/;"	f	typeref:typename:uchar
get_corner_indexes	BoardBitboard.cpp	/^void get_corner_indexes(Bitboard black, Bitboard white, std::vector<int>& lst) {$/;"	f	typeref:typename:void
get_corner_indexes_hv	BoardBitboard.cpp	/^void get_corner_indexes_hv(Bitboard black, Bitboard white, std::vector<int>& lst)$/;"	f	typeref:typename:void
get_corner_indexes_vh	BoardBitboard.cpp	/^void get_corner_indexes_vh(Bitboard black, Bitboard white, std::vector<int>& lst) {$/;"	f	typeref:typename:void
get_num_cannot_turnover	BoardBitboard.cpp	/^void get_num_cannot_turnover(Bitboard black, Bitboard white, int &nb, int &nw) {$/;"	f	typeref:typename:void
get_pat_index	BoardBitboard.cpp	/^int get_pat_index(Bitboard black, Bitboard white, Bitboard pos, int dir) {$/;"	f	typeref:typename:int
get_pat_index_shl	BoardBitboard.cpp	/^int get_pat_index_shl(Bitboard black, Bitboard white, Bitboard pos, int dir, int len) {$/;"	f	typeref:typename:int
get_pat_index_shr	BoardBitboard.cpp	/^int get_pat_index_shr(Bitboard black, Bitboard white, Bitboard pos, int dir, int len) {$/;"	f	typeref:typename:int
get_pat_indexes	BoardBitboard.cpp	/^void get_pat_indexes(Bitboard black, Bitboard white, std::vector<int>& lst) {$/;"	f	typeref:typename:void
get_revbits	BoardBitboard.cpp	/^Bitboard BoardBitboard::get_revbits(Bitboard bit) const {$/;"	f	class:BoardBitboard	typeref:typename:Bitboard
get_revbits	BoardBitboard.cpp	/^Bitboard get_revbits(Bitboard black, Bitboard white, Bitboard bit) {$/;"	f	typeref:typename:Bitboard
get_revbits_dir	BoardBitboard.cpp	/^Bitboard get_revbits_dir(Bitboard black, Bitboard white, Bitboard bit, int dir) {$/;"	f	typeref:typename:Bitboard
indexToPat	BoardIndex.cpp	/^void indexToPat(ushort index, std::string &lst, int len) {$/;"	f	typeref:typename:void
indexToPat	BoardIndex.cpp	/^void indexToPat(ushort index, std::vector<uchar> &lst, int len) {$/;"	f	typeref:typename:void
indexToPat	BoardIndex.cpp	/^void indexToPat(ushort index, uchar *ptr, int len) {$/;"	f	typeref:typename:void
init	BoardArray.cpp	/^void BoardArray::init() {$/;"	f	class:BoardArray	typeref:typename:void
init	BoardBitboard.cpp	/^void BoardBitboard::init() {$/;"	f	class:BoardBitboard	typeref:typename:void
init	BoardIndex.cpp	/^void BoardIndex::init() {$/;"	f	class:BoardIndex	typeref:typename:void
init	Othello6x6.cpp	/^void init(Bitboard &black, Bitboard &white) {$/;"	f	typeref:typename:void
m_bd	BoardArray.h	/^	uchar	m_bd[ARY_SIZE];$/;"	m	class:BoardArray	typeref:typename:uchar[]
m_black	BoardBitboard.h	/^	Bitboard	m_black;$/;"	m	class:BoardBitboard	typeref:typename:Bitboard
m_dst_ix	BoardIndex.cpp	/^	ushort		m_dst_ix;		\/\/	遷移先インデックス$/;"	m	struct:SIndexTableItem	typeref:typename:ushort	file:
m_ix_bl_ur	BoardIndex.h	/^	ushort	m_ix_bl_ur[N_IX_BL_UR];$/;"	m	class:BoardIndex	typeref:typename:ushort[]
m_ix_horz	BoardIndex.h	/^	ushort	m_ix_horz[N_IX_HORZ];$/;"	m	class:BoardIndex	typeref:typename:ushort[]
m_ix_ul_br	BoardIndex.h	/^	ushort	m_ix_ul_br[N_IX_UL_BR];$/;"	m	class:BoardIndex	typeref:typename:ushort[]
m_ix_vert	BoardIndex.h	/^	ushort	m_ix_vert[N_IX_VERT];$/;"	m	class:BoardIndex	typeref:typename:ushort[]
m_n1	BoardIndex.cpp	/^	uchar		m_n1;			\/\/	x or y マイナス方向に返る石数$/;"	m	struct:SIndexTableItem	typeref:typename:uchar	file:
m_n2	BoardIndex.cpp	/^	uchar		m_n2;			\/\/	x or y プラス方向に返る石数$/;"	m	struct:SIndexTableItem	typeref:typename:uchar	file:
m_npbw_val	EvalFunc.h	/^	double m_npbw_val[NPBW_TABLE_SZ];		\/\/	着手可能箇所数評価値テーブル、ix = npb +/;"	m	class:EvalFunc	typeref:typename:double[]
m_pat2_val	EvalFunc.h	/^	double m_pat2_val[N_PTYPE][N_PAT];		\/\/	タイプ別パターン評価値$/;"	m	class:EvalFunc	typeref:typename:double[][]
m_pat8_val	EvalFunc.h	/^	double m_pat8_val[N_PAT8];				\/\/	角８個パターン$/;"	m	class:EvalFunc	typeref:typename:double[]
m_pat_val	EvalFunc.h	/^	double m_pat_val[N_PAT];				\/\/	パターン評価値（全タイプ共通）$/;"	m	class:EvalFunc	typeref:typename:double[]
m_rev_index	EvalFunc.h	/^	int m_rev_index[N_PAT];			\/\/	左右反転したパターンインデックス$/;"	m	class:EvalFunc	typeref:typename:int[]
m_stack	BoardArray.h	/^	std::vector<uchar>		m_stack;	\/\/	put(), un_put() 用スタック$/;"	m	class:BoardArray	typeref:typename:std::vector<uchar>
m_white	BoardBitboard.h	/^	Bitboard	m_white;$/;"	m	class:BoardBitboard	typeref:typename:Bitboard
main	Othello6x6.cpp	/^int main()$/;"	f	typeref:typename:int
negaAlpha	BoardBitboard.cpp	/^Bitboard negaAlpha(Bitboard black, Bitboard white, int &alpha, bool passed) {$/;"	f	typeref:typename:Bitboard
negaAlpha	BoardBitboard.cpp	/^int negaAlpha(Bitboard black, Bitboard white, int alpha, int beta, bool passed = false) {$/;"	f	typeref:typename:int
num_place_can_put_black	BoardBitboard.cpp	/^int num_place_can_put_black(Bitboard black, Bitboard white) {$/;"	f	typeref:typename:int
patToIndex	BoardIndex.cpp	/^ushort patToIndex(const std::vector<uchar> &lst) {$/;"	f	typeref:typename:ushort
perfect_game	Othello6x6.cpp	/^int perfect_game(Bitboard black, Bitboard white, bool verbose) {$/;"	f	typeref:typename:int
popcount	BoardBitboard.cpp	/^int popcount(Bitboard bits) {$/;"	f	typeref:typename:int
print	BoardArray.cpp	/^void BoardArray::print() {$/;"	f	class:BoardArray	typeref:typename:void
print	BoardBitboard.cpp	/^void BoardBitboard::print() const {$/;"	f	class:BoardBitboard	typeref:typename:void
print	BoardBitboard.cpp	/^void print(Bitboard black, Bitboard white) {$/;"	f	typeref:typename:void
print	BoardIndex.cpp	/^void BoardIndex::print() {$/;"	f	class:BoardIndex	typeref:typename:void
print_npbw_table	Othello6x6.cpp	/^void print_npbw_table() {$/;"	f	typeref:typename:void
print_pat_val	Othello6x6.cpp	/^void print_pat_val(int type, bool center) {		\/\/	center: 3, 4 番目は空でないこと$/;"	f	typeref:typename:void
put_BLACK	BoardArray.cpp	/^int BoardArray::put_BLACK(int ix) {$/;"	f	class:BoardArray	typeref:typename:int
put_BLACK	BoardArray.cpp	/^int BoardArray::put_BLACK(int x, int y) {$/;"	f	class:BoardArray	typeref:typename:int
put_WHITE	BoardArray.cpp	/^int BoardArray::put_WHITE(int ix) {$/;"	f	class:BoardArray	typeref:typename:int
put_WHITE	BoardArray.cpp	/^int BoardArray::put_WHITE(int x, int y) {$/;"	f	class:BoardArray	typeref:typename:int
put_black	BoardBitboard.cpp	/^void BoardBitboard::put_black(Bitboard bit) {$/;"	f	class:BoardBitboard	typeref:typename:void
put_black	BoardBitboard.cpp	/^void put_black(Bitboard &black, Bitboard &white, Bitboard bit) {$/;"	f	typeref:typename:void
put_black	BoardIndex.cpp	/^int put_black(std::vector<uchar> &pat, int i) {$/;"	f	typeref:typename:int
put_black	BoardIndex.cpp	/^ushort put_black(ushort index, int i, uchar& n1, uchar& n2) {$/;"	f	typeref:typename:ushort
put_randomly	Othello6x6.cpp	/^bool put_randomly(Bitboard &black, Bitboard &white, int depth, bool passed) {$/;"	f	typeref:typename:bool
put_sub_BLACK	BoardArray.cpp	/^int BoardArray::put_sub_BLACK(int ix, int dir) {	\/\/	返した石数を返す$/;"	f	class:BoardArray	typeref:typename:int
put_sub_WHITE	BoardArray.cpp	/^int BoardArray::put_sub_WHITE(int ix, int dir) {	\/\/	返した石数を返す$/;"	f	class:BoardArray	typeref:typename:int
put_white	BoardIndex.cpp	/^ushort put_white(ushort index, int i, uchar& n1, uchar& n2) {$/;"	f	typeref:typename:ushort
scan_cannot_turnover_shr	BoardBitboard.cpp	/^Bitboard scan_cannot_turnover_shr(Bitboard black, Bitboard white, Bitboard bit, int dir) {$/;"	f	typeref:typename:Bitboard
scan_shr	BoardBitboard.cpp	/^void scan_shr(Bitboard black, Bitboard white, Bitboard bit, int dir) {$/;"	f	typeref:typename:void
toIndex	BoardArray.cpp	/^int BoardArray::toIndex(int ix, int dir) {$/;"	f	class:BoardArray	typeref:typename:int
toIndex	BoardArray.h	/^	int		toIndex(int x, int y, int dir) { return toIndex(xyToIndex(x, y), dir); }$/;"	f	class:BoardArray	typeref:typename:int
uchar	BoardBitboard.h	/^typedef unsigned char uchar;$/;"	t	typeref:typename:unsigned char
uchar	Othello6x6.h	/^typedef unsigned char uchar;$/;"	t	typeref:typename:unsigned char
un_put_BLACK	BoardArray.cpp	/^void BoardArray::un_put_BLACK() {$/;"	f	class:BoardArray	typeref:typename:void
un_put_WHITE	BoardArray.cpp	/^void BoardArray::un_put_WHITE() {$/;"	f	class:BoardArray	typeref:typename:void
ushort	Othello6x6.h	/^typedef unsigned short ushort;$/;"	t	typeref:typename:unsigned short
xyToBit	BoardBitboard.h	/^inline Bitboard xyToBit(int x, int y) {		\/\/	x: [0, N_HORZ), y: [0, N_VERT)$/;"	f	typeref:typename:Bitboard
xyToIndex	Othello6x6.h	/^inline int xyToIndex(int x, int y) {		\/\/	x: [1, N_HORZ], y: [1, N_VERT]$/;"	f	typeref:typename:int
