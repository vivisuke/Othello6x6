SPR# 状 P Open Close ver     Type  概要
-------------------------------------------------------------------------------
0001 ◎ C 07/23 07/23 0.001│ToDo│プロジェクト作成
0002 ◎ C 07/23 07/23 0.001│ToDo│BoardArray クラス追加
0003 ◎ C 07/24 07/24 0.001│ToDo│BoardArray::can_put_BLACK(x, y) 実装
0004 ◎ C 07/24 07/24 0.001│ToDo│BoardArray::put_BLACK(x, y) 実装
0005 ◎ C 07/24 07/24 0.001│ToDo│BoardArray::put_WHITE(x, y) 実装
0006 ◎ C 07/24 07/24 0.001│ToDo│BoardArray::un_put_BLACK(x, y), un_put_WHITE(x, y) 実装
0007 ◎ C 07/24 07/24 0.001│ToDo│10手先までの局面を全部生成し、末端局面数を求めてみる
0008 ◎ C 07/24 07/24 0.001│ToDo│盤面位置・方向を引数にとり、パターンをインデックス化する関数実装
0009 ◎ C 07/24 07/30 0.001│ToDo│インデックス→打つ場所ごとの遷移先インデックステーブル作成
0010 ◎ C 07/28 07/28 0.001│ToDo│BoardIndex クラス追加
0011 ◎ C 07/30 07/30 0.001│ToDo│ushort put_black(ushort index, int i, int& n1, int& n2)
0012 ● C 07/30            │ToDo│ushort put_white(ushort index, int i, int& n1, int& n2)
0013 ◎ C 08/01 08/01 0.001│ToDo│BoardBitboard クラス追加
0014 ◎ C 08/01 08/01 0.001│ToDo│BoardBitboard::get_revbits(Bitboard bit)
0015 ◎ C 08/01 08/01 0.001│ToDo│Bitboard：10手先までの局面を全部生成し、末端局面数を求めてみる
0016 ◎ C 08/01 08/01 0.001│問題│局面数カウント：パスの場合に対応していない
0017 ● C 08/02            │ToDo│BoardBitboard::get_revbits(Bitboard bit)：非ループ版実装＆計測
0018 ◎ C 08/13 08/14 0.001│ToDo│ランダムに着手を選び、指定空き数まで進めることを可能に
0019 ◎ C 08/16 08/18 0.001│ToDo│終局まで完全読み：NegaAlpha(b, w)
0020 ◎ C 08/17 08/17 0.001│ToDo│int popcount(Bitboard) 実装
0021 ◎ C 08/18 08/18 0.001│ToDo│put_randomly(&black, &white)：引数盤面を修正
0022 ◎ C 08/18 08/18 0.001│ToDo│bitToXY(Bitboard b) 実装
0023 ◎ C 08/18 08/18 0.001│ToDo│指定局面からの双方最善手順・局面を表示可能に
0024 ◎ C 08/18 08/18 0.001│問題│perfect_game()：パスがあるとそこで処理が終わってしまう
0025 ◎ C 08/19 08/26 0.001│ToDo│指定位置・方向・セル数を受け取り、パターンインデックスを計算
0026 ◎ C 08/22 08/23 0.001│ToDo│学習用にランダムゲーム8個空き局面・最善石差＊5万局生成
0027 ◎ C 08/23 08/23 0.001│ToDo│盤面状態→16進数文字列変換関数実装
0028 ● C 08/23            │ToDo│評価用にランダムゲーム8個空き局面・最善石差＊1万局生成
0029 ◎ C 08/23 08/23 0.001│問題│perfect_game() が明らかに不正な値を返すことがある
0030 ◎ C 08/23 08/23 0.001│問題│終局時の空欄が勝者のものになっていない
0031 ● C 08/23            │ToDo│準確定石を計算可能に
0032 ◎ C 08/25 08/25 0.001│ToDo│8個空き局面生成・完全読み*1万：石差平均・標準偏差計算
0033 ◎ C 08/25 08/26 0.001│ToDo│局面の各パターンインデックスを配列に格納する関数実装
0034 ◎ C 08/25 08/26 0.001│ToDo│パターン位置を考慮しないパターン評価値学習
0035 ◎ C 08/26 08/26 0.001│ToDo│パターンインデックス→パターン文字列変換関数実装
0036 ◎ C 08/26 08/26 0.001│ToDo│パターン位置を考慮したパターン評価値学習
0037 ◎ C 08/28 08/28 0.001│ToDo│着手可能数を返す関数実装
0038 ◎ C 08/28 08/28 0.001│ToDo│着手可能数（npb * npw）評価値テーブル
0039 ◎ C 08/28 08/29 0.001│問題│黒がパスの場合の評価値が変？
0040 ◎ C 08/28 09/02 0.001│ToDo│パターン評価値：向きが逆のパターンもいっしょに更新
0041 ◎ C 08/29 08/29 0.001│ToDo│put_randomly()：双方パスで途中で終局の場合は false を返す
0042 ◎ C 08/29 08/31 0.001│ToDo│角の8セル2もパターン化
0043 ○ C 08/29            │ToDo│８セルパターンをスキャンし、空欄に隣接していない連のビット計算
0044 ◎ C 08/29 08/30 0.001│ToDo│print_pat_val()
0045 ◎ C 09/01 09/02 0.001│ToDo│ビットボード：スキャン関数実装
0046 ◎ C 09/02 09/03 0.001│ToDo│黒・白の準確定石数取得関数実装
0047 ● C 09/02            │ToDo│評価関数：余裕手数も考慮？
0048 ● C 09/02            │ToDo│評価関数：準確定石数差を考慮（定数倍とし、その係数を学習）
0049 ● C 09/04            │ToDo│評価関数を関数化
0050 ● C 09/04            │ToDo│評価値、完全読み石差表示 → 直線回帰・相関係数計算（表計算ソフト使用）
0051 ◎ C 09/05 09/10 0.001│ToDo│評価関数計算・パラメータ学習用クラス定義（クラス名：M）
0052 ◎ C 09/10 09/11 0.001│ToDo│ML：全位置共通パターン学習関数追加
0053 ◎ C 09/10 09/11 0.001│ToDo│ML：全位置共通パターン評価用関数追加
0054 ◎ C 09/11 09/11 0.001│ToDo│ML：位置ごとのパターン学習関数・パターン評価用関数追加
0055 ◎ C 09/11 09/12 0.001│ToDo│ML：位置ごとのパターン学習関数・パターン評価用関数にコーナーパターン追加
0056 ◎ C 09/12 09/12 0.001│ToDo│8個空き局面で学習した評価関数を4個空き局面に適用して評価
0057 ◎ C 09/12 09/12 0.001│ToDo│ML > 学習関数・評価用関数：着手可能箇所数評価追加
0058 ◎ C 09/12 09/14 0.001│ToDo│学習結果評価時：平均自乗誤差の平方根も表示
0059 ◎ C 09/15 09/15 0.001│ToDo│学習結果評価時：相関係数も計算・表示
0060 ● C 09/16 09/16 0.001│ToDo│Godot プロジェクト追加
0061 ◎ C 09/16 09/16 0.001│ToDo│盤面表示
0062 ◎ C 09/16 09/16 0.001│ToDo│盤面座標：a-f, 1-6 表示
0063 ◎ C 09/16 09/16 0.001│ToDo│盤面：空欄・黒白・白石表示用タイルマップ設置
0064 ● C 09/17            │ToDo│ランダム vs 人間で対戦可能に
0065 ● C 09/17            │ToDo│人間手番：打てる箇所を強調
0066 ◎ C 09/17 09/18 0.001│ToDo│盤面上部に AI, 人間 ボタン？設置
0067 ◎ C 09/17 09/17 0.001│ToDo│盤面上部にアプリ名「vithello」？表示
0068 ◎ C 09/17 09/17 0.001│ToDo│盤面タイルマップセル値：黒=1, 白=2 に変更？
0069 ◎ C 09/17 09/17 0.001│ToDo│盤面：着手箇所・着手可能箇所表示用タイルマップ設置
0070 ◎ C 09/17 09/17 0.001│ToDo│func _input(event)：タップされたセル座標取得
0071 ◎ C 09/17 09/17 0.001│ToDo│bd_array[] を原本とし、その状態を TileMap に反映させる
0072 ◎ C 09/17 09/18 0.001│ToDo│update_cursor() 実装
0073 ◎ C 09/18 09/18 0.001│ToDo│put, un_put() 実装
0074 ◎ C 09/18 09/18 0.001│ToDo│盤面クリック→打てる場合はそこに石を打つ・相手石を返す
0075 ● C 09/18            │ToDo│
0076 ● C 09/18            │ToDo│
0077 ● C 09/18            │ToDo│
0078 ● C 09/18            │ToDo│
0079 ● C 09/18            │ToDo│
0080 ● C 09/18            │ToDo│
